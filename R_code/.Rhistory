ln.pq.dif
1/(1/3)
log(3)
log(4)
log(4)*4
log(3)*3
seq_1= c(1,1,1,2,2,2,3,3,3)
seq_2 = c(2,2,2,1,1,1,3,3,3)
KL.divergence(seq_1, seq_2, 3)
seq_1= c(1,1,1,2,2,2,3,3,3)
seq_2 = c(2,2,2,1,1,1,3,3,3)
KL.divergence(seq_1, seq_2, 3)
seq_1= c(1,1,1,2,2,2,3,3,3)
seq_2 = c(2,2,2,1,1,1,3,3,3)
KL.divergence(seq_1, seq_2, 3)
3*log(3)
4*log(4)
seq_1= c(1,1,1,2,2,2,3,3,3)
seq_2 = c(2,2,1,1,1,1,3,3,3)
KL.divergence(seq_1, seq_2, 3)
print(KL.divergence(cluster_trace[[100]], cluster, K)/K)
print(KL.divergence(cluster_trace[[100]], cluster, K))
print(KL.divergence(cluster_trace[[100]], cluster, K)/K)
seq_1= c(1,1,1,2,2,2,3,3,3)
seq_2 = c(2,2,2,1,1,1,3,3,3)
KL.divergence(seq_1, seq_2, 3)/3
KL.divergence(seq_1, seq_2, 3)/3
seq_1= c(1,1,1,2,2,2,3,3,3)
seq_2 = c(2,2,2,1,1,1,3,3,3)
KL.divergence(seq_1, seq_2, 3)
KL.divergence(cluster_trace[[100]], cluster, K)/(K*log(K))
KL.divergence(seq_1, seq_2, 3)/(3*log(3))
source('~/PycharmProjects/hmm/R_code/compare_mle_to_bw.R', echo=TRUE)
source('~/PycharmProjects/hmm/R_code/compare_mle_to_bw.R', echo=TRUE)
source('~/PycharmProjects/hmm/R_code/compare_mle_to_bw.R', echo=TRUE)
eps = 0.1
source('~/PycharmProjects/hmm/R_code/compare_mle_to_bw.R', echo=TRUE)
source('~/PycharmProjects/hmm/R_code/compare_mle_to_bw.R', echo=TRUE)
cluster
num_ind = 50
K = 4
cluster = rep(c(0:(K-1)),num_ind)[1:num_ind]
for (i in 1:100){
prop_cluster = propose.cluster.1(cluster, K)
cluster = prop_cluster
}
cluster
source('~/PycharmProjects/hmm/R_code/run_cz_hmm_mle.R', echo=TRUE)
source('~/PycharmProjects/hmm/R_code/run_cz_hmm_mle.R', echo=TRUE)
source('~/PycharmProjects/hmm/R_code/run_cz_hmm_mle.R', echo=TRUE)
x = c(1, 2, 3)
x-1
source('~/PycharmProjects/hmm/R_code/run_cz_hmm_mle.R', echo=TRUE)
source('~/PycharmProjects/hmm/R_code/run_cz_hmm_mle.R', echo=TRUE)
cluster_trace
cluster_trace[[100]]
cluster
source('~/PycharmProjects/hmm/R_code/run_cz_hmm_mle.R', echo=TRUE)
source('chunyi_r/working.mle.r')
library(coda)
num_ind = 50
K = 4
cluster = rep(c(0:(K-1)),num_ind)[1:num_ind]
for (i in 1:100){
prop_cluster = propose.cluster.1(cluster, K)
cluster = prop_cluster
}
pi = rep(1/K, K)
lambda = 0.2
eps = 0.01
print('Init Cluster')
print(cluster)
table(cluster)
sim_data = sim.data(100, K, cluster, eps, lambda, pi)
output = run.mle(list(sim_data[,1]), K, num_ind, eps=0.3, lambda = 0.2, pi, num.iter=10000, thin=100, diff=0.1)
lambda_trace = unlist(lapply(output, function(x) x$lambda))
eps_trace = unlist(lapply(output, function(x) x$eps))
cluster_trace = rep(list(), length(output))
for (i in 1:length(output)){
cluster_trace[[i]] = output[[i]]$cluster
}
lambda_mcmc = as.mcmc(lambda_trace, thin=50, burnin=0)
summary(lambda_mcmc)
eps_mcmc = as.mcmc(eps_trace, thin=50, burnin=0)
summary(eps_mcmc)
print(KL.divergence(cluster_trace[[100]], cluster, K)/(K*log(K)))
source('~/PycharmProjects/hmm/R_code/run_cz_hmm_mle.R', echo=TRUE)
Q
Q
source('~/PycharmProjects/hmm/R_code/run_cz_hmm_mle.R', echo=TRUE)
source('~/PycharmProjects/hmm/R_code/run_cz_hmm_mle.R', echo=TRUE)
source("chunyi_R/working.mle.r")
source('~/PycharmProjects/hmm/R_code/chunyi_R/sample_partition.r', echo=TRUE)
source('~/PycharmProjects/hmm/R_code/chunyi_R/sample_partition.r', echo=TRUE)
source('~/PycharmProjects/hmm/R_code/chunyi_R/sample_partition.r', echo=TRUE)
cz_entropy
source('~/PycharmProjects/hmm/R_code/chunyi_R/sample_partition.r', echo=TRUE)
cz_entropy
source('~/PycharmProjects/hmm/R_code/chunyi_R/sample_partition.r', echo=TRUE)
debugSource('~/PycharmProjects/hmm/R_code/chunyi_R/sample_partition.r', echo=TRUE)
orginal_new
original_new
cur_clust
cur_clust == cur_clust
source('~/PycharmProjects/hmm/R_code/chunyi_R/sample_partition.r', echo=TRUE)
original_entropy
init_cluster - 1 == init_cluster_org
cz_entropy
source('~/PycharmProjects/hmm/R_code/chunyi_R/sample_partition.r', echo=TRUE)
source('~/PycharmProjects/hmm/R_code/chunyi_R/sample_partition.r', echo=TRUE)
min(cz_entropy)
min(original_entropy)
summary(cz_entropy)
summary(original_entropy)
source('~/PycharmProjects/hmm/R_code/run_cz_hmm_mle.R', echo=TRUE)
source('~/PycharmProjects/hmm/R_code/run_cz_hmm_mle.R', echo=TRUE)
source('~/PycharmProjects/hmm/R_code/run_cz_hmm_mle.R', echo=TRUE)
source('~/PycharmProjects/hmm/R_code/run_cz_hmm_mle.R', echo=TRUE)
source('~/PycharmProjects/hmm/R_code/run_cz_hmm_mle.R', echo=TRUE)
source('~/PycharmProjects/hmm/R_code/run_cz_hmm_mle.R', echo=TRUE)
source('~/PycharmProjects/hmm/R_code/run_cz_hmm_mle.R', echo=TRUE)
source('~/PycharmProjects/hmm/R_code/run_cz_hmm_mle.R', echo=TRUE)
source('~/PycharmProjects/hmm/R_code/run_cz_hmm_mle.R', echo=TRUE)
source('~/PycharmProjects/hmm/R_code/run_cz_hmm_mle.R', echo=TRUE)
KL.divergence(cluster_trace[[100]], cluster, K)
cluster
cluster_trace[[100]]
KL.divergence(cluster_trace[[100]], cluster, K)
2*log(2)
table(cluster, cluster_trace)
table(cluster, cluster_trace[[100]])
result = cluster_trace[[100]]
clust = cluster
num.states=K
k
K
clust
compare.table = table(result,clust)
ln.pq.dif  = matrix(rep(0,num.states^2),nrow = num.states)
p.matrix = compare.table
p.matrix
for (i in 1:dim(compare.table)[1]){
p.matrix[i,] = compare.table[i,]/sum(compare.table[i,])
zero = which(p.matrix[i,] ==0)
ln.pq.dif[i,] = p.matrix[i,]
ln.pq.dif[i,-zero] = p.matrix[i,-zero]*(log(p.matrix[i,-zero]/(1/num.states)))
}
p.matrix
i = 1
zero = which(p.matrix[i,] ==0)
zero
p.matrix[i,-zero]
bool(zero)
boolean(zero)
zero == 0
is.null(zero)
zero
zero = which(p.matrix[i,] ==0)
as.numeric(zero)
as.numeric(zero) == 0
length(zero)
source('~/PycharmProjects/hmm/R_code/run_cz_hmm_mle.R', echo=TRUE)
table(cluster_trace[[100]], cluster, K)
table(cluster_trace[[100]], cluster)
source('~/PycharmProjects/hmm/R_code/run_cz_hmm_mle.R', echo=TRUE)
table(cluster, cluster_trace[[100]])
unlist(output$llk)
output
llk = unlist(lapply(output, function(x) x$llk))
llk
plot(unlist(output$llk)~ 1:length(llk))
plot(llk~ 1:length(llk))
plot(llk, 1:length(llk))
plot(1:length(llk), llk)
plot(1:length(llk), llk, 'l')
source('~/PycharmProjects/hmm/R_code/run_cz_hmm_mle.R', echo=TRUE)
source('~/PycharmProjects/hmm/R_code/run_cz_hmm_mle.R', echo=TRUE)
print(paste('Num chain', num.chain, 'Num ind', num.ind, 'Num states', num.states, 'Soft diff', soft.diff, sep = ','))
num.chain = 5
num.ind = 50
num.states = 5
soft.diff = 0.1
print(paste('Num chain', num.chain, 'Num ind', num.ind, 'Num states', num.states, 'Soft diff', soft.diff, sep = ','))
write.table
source('~/PycharmProjects/hmm/R_code/run_cz_hmm_mle.R', echo=TRUE)
100%%10
102%%10
source('~/PycharmProjects/hmm/R_code/run_cz_hmm_mle.R', echo=TRUE)
source('~/PycharmProjects/hmm/R_code/run_cz_hmm_mle.R', echo=TRUE)
source('~/PycharmProjects/hmm/R_code/run_cz_hmm_mle.R', echo=TRUE)
sim_data_list
source('chunyi_r/working.mle.r')
library(coda)
num_ind = 30
K = 5
lambda = 0.2
eps = 0.01
soft_diff=0.1
num_chain = 3
cluster = rep(c(0:(K-1)),num_ind)[1:num_ind]
for (i in 1:100){
prop_cluster = propose.cluster.1(cluster, K)
cluster = prop_cluster
}
pi = rep(1/K, K)
print('Init Cluster')
print(cluster)
sim_data_list = list()
for (i in 1:num_chain){
sim_data = sim.data(num_ind, K, cluster, eps, lambda, pi)
sim_data_list = c(sim_data_list, sim_data[, 1])
}
sim_data
sim_data[, 1]
sim_data_list
sim_data_list = list()
for (i in 1:num_chain){
sim_data = sim.data(num_ind, K, cluster, eps, lambda, pi)
sim_data_list$i = sim_data[, 1]
}
sim_data_list
sim_data_list = list()
for (i in 1:num_chain){
sim_data = sim.data(num_ind, K, cluster, eps, lambda, pi)
sim_data_list= c(sim_data_list, i = sim_data[, 1])
}
sim_data_list
### Run this file to see test to see the demo of cz_hmm_mle
source('chunyi_r/working.mle.r')
library(coda)
num_ind = 30
K = 5
lambda = 0.2
eps = 0.01
soft_diff=0.1
num_chain = 3
cluster = rep(c(0:(K-1)),num_ind)[1:num_ind]
for (i in 1:100){
prop_cluster = propose.cluster.1(cluster, K)
cluster = prop_cluster
}
pi = rep(1/K, K)
print('Init Cluster')
print(cluster)
sim_data_list = list()
for (i in 1:num_chain){
sim_data = sim.data(num_ind, K, cluster, eps, lambda, pi)
sim_data_list= c(sim_data_list, i = sim_data[, 1])
}
sim_data_list
test_List = list(a = 1)
test_list = list(test_list, list(2))
test_list = list(a = 1)
test_list = list(test_list, list(2))
test_list
sim_data_list = rep(list(), num_chain)
for (i in 1:num_chain){
sim_data = sim.data(num_ind, K, cluster, eps, lambda, pi)
sim_data_list[[i]] = sim_data[, 1]
}
sim_data_list
source('~/PycharmProjects/hmm/R_code/run_cz_hmm_mle.R', echo=TRUE)
source('~/PycharmProjects/hmm/R_code/run_cz_hmm_mle_shell.R', echo=TRUE)
source('~/PycharmProjects/hmm/R_code/run_cz_hmm_mle_shell.R', echo=TRUE)
source('~/PycharmProjects/hmm/R_code/run_cz_hmm_mle_shell.R', echo=TRUE)
num.iter=10000
thin=100
for (i in 1:num.iter/thin){
write.table(c(entropy, output[[i]]$llk, output[[i]]$lambda, output[[i]]$eps, output[[i]]$cluster),file.name, quote=F, sep=",", row.names = F,col.names=F)
}
for (i in 1:num.iter/thin){
write.table(c(entropy, output[[i]]$llk, output[[i]]$lambda, output[[i]]$eps, output[[i]]$cluster),file.name, append=T, quote=F, sep=",", row.names = F,col.names=F)
}
file.name = paste("output/sim",num.chain,num.ind,num.states,soft.diff,trial.num,sep="_")
print(file.name)
for (i in 1:num.iter/thin){
write.table(c(entropy, output[[i]]$llk, output[[i]]$lambda, output[[i]]$eps, output[[i]]$cluster),file.name, append=T, quote=F, sep=",", row.names = F,col.names=F)
}
read.table(file.name, header=F, sep=',', quote=F, row.names = F, col.names = F)
read.table(file.name, header=F, sep=',', row.names = F, col.names = F)
read.table(file.name, header=F, sep=',')
test = read.table(file.name, header=F, sep=',')
test
dim(test )
this_mat = matrix(c(entropy, output[[i]]$llk, output[[i]]$lambda, output[[i]]$eps, output[[i]]$cluster), nrow=1)
this_mat
print(file.name)
for (i in 1:num.iter/thin){
this_mat = matrix(c(entropy, output[[i]]$llk, output[[i]]$lambda, output[[i]]$eps, output[[i]]$cluster), nrow=1)
write.table(this_mat,file.name, append=T, quote=F, sep=",", row.names = F,col.names=F)
}
test = read.table(file.name, header=F, sep=',')
test
dim(test)
print(file.name)
for (i in 1:num.iter/thin){
this_mat = matrix(c(entropy, output[[i]]$llk, output[[i]]$lambda, output[[i]]$eps, output[[i]]$cluster), nrow=1)
write.table(this_mat,file.name, append=T, quote=F, sep=",", row.names = F,col.names=F)
}
test = read.table(file.name, header=F, sep=',')
test
dim(test)
num.iter/thin
this_mat
length(output)
print(file.name)
for (i in 1:num.iter/thin){
this_mat = matrix(c(entropy, output[[i]]$llk, output[[i]]$lambda, output[[i]]$eps, output[[i]]$cluster), nrow=1)
write.table(this_mat,file.name, append=F, quote=F, sep=",", row.names = F,col.names=F)
}
test = read.table(file.name, header=F, sep=',')
dim(test)
print(file.name)
for (i in 1:num.iter/thin){
this_mat = matrix(c(entropy, output[[i]]$llk, output[[i]]$lambda, output[[i]]$eps, output[[i]]$cluster), nrow=1)
write.table(this_mat,file.name, append=T, quote=F, sep=",", row.names = F,col.names=F)
}
test = read.table(file.name, header=F, sep=',')
dim(test)
final_table = matrix(rep(0, num.iter/thin *length(c(entropy, output[[0]]$llk, output[[0]]$lambda, output[[0]]$eps, output[[0]]$cluster))), nrow=num.iter/thin )
rep(0, num.iter/thin *length(c(entropy, output[[0]]$llk, output[[0]]$lambda, output[[0]]$eps, output[[0]]$cluster)))
final_table = matrix(rep(0, num.iter/thin *length(c(entropy, output[[1]]$llk, output[[1]]$lambda, output[[1]]$eps, output[[0]]$cluster))), nrow=num.iter/thin )
final_table = matrix(rep(0, num.iter/thin *length(c(entropy, output[[1]]$llk, output[[1]]$lambda, output[[1]]$eps, output[[1]]$cluster))), nrow=num.iter/thin )
dim(final_table)
print(file.name)
final_table = matrix(rep(0, num.iter/thin *length(c(entropy, output[[1]]$llk, output[[1]]$lambda, output[[1]]$eps, output[[1]]$cluster))), nrow=num.iter/thin )
for (i in 1:num.iter/thin){
final_table[i, ] = c(entropy, output[[i]]$llk, output[[i]]$lambda, output[[i]]$eps, output[[i]]$cluster)
}
write.table(final_table, file.name, append=F, quote=F, sep=",", row.names = F,col.names=F)
test = read.table(file.name, header=F, sep=',')
test
dim(test)
plot(1:length(llk), llk, 'l')
llk = unlist(lapply(output, function(x) x$llk))
plot(1:length(llk), llk, 'l')
table(cluster_trace[[100]], cluster, K)
table(cluster_trace[[100]], cluster)
plot(1:length(llk), llk, 'l', main = paste('Num chain', num.chain, 'Num ind', num.ind, 'Num states', num.states, 'Soft diff', soft.diff, sep = ', ',  'Trial number', trial.num))
graph_file_name = paste("output/graph/sim",num.chain,num.ind,num.states,soft.diff,trial.num,sep="_")
llk = unlist(lapply(output, function(x) x$llk))
pdf(paste(file.name, '.pdf'))
plot(1:length(llk), llk, 'l', main = paste('Num chain', num.chain, 'Num ind', num.ind, 'Num states', num.states, 'Soft diff', soft.diff, sep = ', ',  'Trial number', trial.num))
dev.off()
tets = matrix(c(1,1,1,0,1,1,0,0,1), nrow=3)
test
a = matrix(c(1,1,1,0,1,1,0,0,1), nrow=3)
a
a = matrix(c(1,1,1,0,1,1,0,0,1), ncol=3)
a
a = t(a)
a
a %*% a
a %*% a %*% a
a %*% a %*% a %*% a
a %*% a %*% a %*% a %*% a
a = matrix(c(1,0,5,1), nrow=2)
a
b = matrix(c(1, 0, 5, 1), nrow =2)
b_1 = matrix(c(0, 0, 0, 1), nrow=2)
b
b_1
a = matrix(c(1, 0, 1, 1), nrow=2)
d_1 = matrix(c(0,1,1,3), nrow=2)
a
b
b_1
d_1
a%*%b_1 + b %*% d_1
det(matrix(c(6, 7, 0, 0, 0, 1, 1, 1, 1), nrow=3))
det(matrix(c(3, -1, 3, -2, 1, 1, 1, 0, 0), nrow=3))
det(matrix(c(3,-1,3, -2,1,1,-2,1,-2), nrow=3))
det(matrix(c(3, -1, 3, -2, 1, 1, 0, 1, 0), nrow=3))
det(matrix(c(3, -1, 3, -2, 1, -1, 0, 1, 0), nrow=3))
top = det(matrix(c(3, -1, 3, -2, 1, -1, 0, 1, 0), nrow=3))
top
bottom = det(matrix(c(3, -1, 3, -2, 1, -1, -2, 1, -2), nrow=3))
bottom
top / bottom
source('~/PycharmProjects/hmm/R_code/run_cz_hmm_mle.R', echo=TRUE)
num_chain=1
source('~/PycharmProjects/hmm/R_code/run_cz_hmm_mle.R', echo=TRUE)
soft.diff = 0.5
source('~/PycharmProjects/hmm/R_code/run_cz_hmm_mle.R', echo=TRUE)
num.chain=1
source('~/PycharmProjects/hmm/R_code/run_cz_hmm_mle.R', echo=TRUE)
source('~/PycharmProjects/hmm/R_code/run_cz_hmm_mle.R', echo=TRUE)
num.chain=10
source('~/PycharmProjects/hmm/R_code/run_cz_hmm_mle.R', echo=TRUE)
source('~/PycharmProjects/hmm/R_code/run_cz_hmm_mle.R', echo=TRUE)
source('~/PycharmProjects/hmm/R_code/run_cz_hmm_mle.R', echo=TRUE)
source('~/PycharmProjects/hmm/R_code/run_cz_hmm_mle.R', echo=TRUE)
source('~/PycharmProjects/hmm/R_code/run_cz_hmm_mle.R', echo=TRUE)
table = read.table('data/clean.data.student', header=F, sep=',')
table = read.table('data/clean.data.students', header=F, sep=',')
head(table)
table = read.table('data/clean.data.students', header=F, sep='\t')
head(table)
table = read.table('data/clean.data.students', header=F, sep='\\')
head(table)
load('data/all_data_list.Rdata')
observ.str
student = read.csv('student.csv', header=T, sep=',')
student = read.csv('students.csv', header=T, sep=',')
student = read.csv('data/students.csv', header=T, sep=',')
head(student)
all_id = unique(student$Student)
all_dorms = unique(student$Fall_2011)
len(all_id)
length(all_id)
first_dorms = unique(student$Freshman)
all_dorms
first_dorms
union(all_dorms, first_dorms)
union(all_dorms, first_dorms) %in% first_dorms
intersect(all_dorms, first_dorms) %in% first_dorms
first_dorms %in% intersect(all_dorms, first_dorms)
source('~/PycharmProjects/hmm/R_code/data/data_cleaning.r', echo=TRUE)
warnings()
coded_fall_2011
all_id
all_dorms
fall_2011
fall_2011[1]
str(Fall_2011)
str(student$Fall_2011)
all_dorms = unique(as.characters(student$Fall_2011))
all_dorms = unique(as.character(student$Fall_2011))
all_dorms
all_id = unique(student$Student)
all_dorms = unique(as.character(student$Fall_2011))
first_dorms = unique(student$Freshman)
fall_2011 = as.character(student$Fall_2011)
coded_fall_2011 = fall_2011
for(i in 1:length(all_dorms)){
this_dorm = all_dorms[i]
this_dorm_index = which(all_dorms == this_dorm)
coded_fall_2011[fall_2011 == this_dorm] = this_dorm_index
}
coded_fall_2011
coded_fall_2011 = as.numeric(coded_fall_2011)
coded_fall_2011
first_dorms
first_dorms = unique(as.character(student$Freshman))
first_dorms
freshman = as.character(student$Freshman)
freshman[freshman == 'N/A'] = NULL
freshman[freshman == 'N/A'] = NA
coded_freshman = freshman
for (j in 1:length(first_dorms)){
this_dorm = first_dorms[j]
this_dorm_index = which(all_dorms == this_dorm)
coded_freshman[freshman == this_dorm] = this_dorm_index
}
this_dorm
first_dorms = first_dorms[-which(first_dorms == 'N/A')]
first_dorms
coded_freshman = freshman
for (j in 1:length(first_dorms)){
this_dorm = first_dorms[j]
this_dorm_index = which(all_dorms == this_dorm)
coded_freshman[freshman == this_dorm] = this_dorm_index
}
coded_freshman = as.numeric(coded_freshman)
coded_freshman
which(coded_freshman == NA)
which(first_dorms == NA)
which(freshman == 'N/A')
freshman = as.character(student$Freshman)
which(freshman == 'N/A')
coded_freshman[253]
coded_freshman[254]
coded_freshman[255]
all_id = unique(student$Student)
all_dorms = unique(as.character(student$Fall_2011))
first_dorms = unique(as.character(student$Freshman))
first_dorms = first_dorms[-which(first_dorms == 'N/A')]
# No point changing the id --> need to re-map later anyway
# Convert all dorms
fall_2011 = as.character(student$Fall_2011)
coded_fall_2011 = fall_2011
for(i in 1:length(all_dorms)){
this_dorm = all_dorms[i]
this_dorm_index = which(all_dorms == this_dorm)
coded_fall_2011[fall_2011 == this_dorm] = this_dorm_index
}
coded_fall_2011 = as.numeric(coded_fall_2011)
freshman = as.character(student$Freshman)
freshman[freshman == 'N/A'] = 0
coded_freshman = freshman
for (j in 1:length(first_dorms)){
this_dorm = first_dorms[j]
this_dorm_index = which(all_dorms == this_dorm)
coded_freshman[freshman == this_dorm] = this_dorm_index
}
coded_freshman = as.numeric(coded_freshman)
coded_freshman
which(coded_freshman == 0)
student$Student
clean_student_df = data.frame(id = student$Student, gender = student$GENDER_CD, class_year = student$CLASS_YR, fall_2011 = coded_fall_2011, fresh_dorm = coded_freshman)
clean_student_df
which(student$CLASS_YR == NA)
which(as.character(student$CLASS_YR) == 'NA;)
;
)
llll
:
;
}
;
clean_student_df = data.frame(id = student$Student, gender = student$GENDER_CD, class_year = student$CLASS_YR, fall_2011 = coded_fall_2011, fresh_dorm = coded_freshman)
)
