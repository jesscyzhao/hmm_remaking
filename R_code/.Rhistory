prop_cluster = propose.cluster.1(cluster, K)
cluster = prop_cluster
}
pi = rep(1/K, K)
print('Init Cluster')
print(cluster)
sim_data_list = list()
for (i in 1:num_chain){
sim_data = sim.data(num_ind, K, cluster, eps, lambda, pi)
sim_data_list= c(sim_data_list, i = sim_data[, 1])
}
sim_data_list
test_List = list(a = 1)
test_list = list(test_list, list(2))
test_list = list(a = 1)
test_list = list(test_list, list(2))
test_list
sim_data_list = rep(list(), num_chain)
for (i in 1:num_chain){
sim_data = sim.data(num_ind, K, cluster, eps, lambda, pi)
sim_data_list[[i]] = sim_data[, 1]
}
sim_data_list
source('~/PycharmProjects/hmm/R_code/run_cz_hmm_mle.R', echo=TRUE)
source('~/PycharmProjects/hmm/R_code/run_cz_hmm_mle_shell.R', echo=TRUE)
source('~/PycharmProjects/hmm/R_code/run_cz_hmm_mle_shell.R', echo=TRUE)
source('~/PycharmProjects/hmm/R_code/run_cz_hmm_mle_shell.R', echo=TRUE)
num.iter=10000
thin=100
for (i in 1:num.iter/thin){
write.table(c(entropy, output[[i]]$llk, output[[i]]$lambda, output[[i]]$eps, output[[i]]$cluster),file.name, quote=F, sep=",", row.names = F,col.names=F)
}
for (i in 1:num.iter/thin){
write.table(c(entropy, output[[i]]$llk, output[[i]]$lambda, output[[i]]$eps, output[[i]]$cluster),file.name, append=T, quote=F, sep=",", row.names = F,col.names=F)
}
file.name = paste("output/sim",num.chain,num.ind,num.states,soft.diff,trial.num,sep="_")
print(file.name)
for (i in 1:num.iter/thin){
write.table(c(entropy, output[[i]]$llk, output[[i]]$lambda, output[[i]]$eps, output[[i]]$cluster),file.name, append=T, quote=F, sep=",", row.names = F,col.names=F)
}
read.table(file.name, header=F, sep=',', quote=F, row.names = F, col.names = F)
read.table(file.name, header=F, sep=',', row.names = F, col.names = F)
read.table(file.name, header=F, sep=',')
test = read.table(file.name, header=F, sep=',')
test
dim(test )
this_mat = matrix(c(entropy, output[[i]]$llk, output[[i]]$lambda, output[[i]]$eps, output[[i]]$cluster), nrow=1)
this_mat
print(file.name)
for (i in 1:num.iter/thin){
this_mat = matrix(c(entropy, output[[i]]$llk, output[[i]]$lambda, output[[i]]$eps, output[[i]]$cluster), nrow=1)
write.table(this_mat,file.name, append=T, quote=F, sep=",", row.names = F,col.names=F)
}
test = read.table(file.name, header=F, sep=',')
test
dim(test)
print(file.name)
for (i in 1:num.iter/thin){
this_mat = matrix(c(entropy, output[[i]]$llk, output[[i]]$lambda, output[[i]]$eps, output[[i]]$cluster), nrow=1)
write.table(this_mat,file.name, append=T, quote=F, sep=",", row.names = F,col.names=F)
}
test = read.table(file.name, header=F, sep=',')
test
dim(test)
num.iter/thin
this_mat
length(output)
print(file.name)
for (i in 1:num.iter/thin){
this_mat = matrix(c(entropy, output[[i]]$llk, output[[i]]$lambda, output[[i]]$eps, output[[i]]$cluster), nrow=1)
write.table(this_mat,file.name, append=F, quote=F, sep=",", row.names = F,col.names=F)
}
test = read.table(file.name, header=F, sep=',')
dim(test)
print(file.name)
for (i in 1:num.iter/thin){
this_mat = matrix(c(entropy, output[[i]]$llk, output[[i]]$lambda, output[[i]]$eps, output[[i]]$cluster), nrow=1)
write.table(this_mat,file.name, append=T, quote=F, sep=",", row.names = F,col.names=F)
}
test = read.table(file.name, header=F, sep=',')
dim(test)
final_table = matrix(rep(0, num.iter/thin *length(c(entropy, output[[0]]$llk, output[[0]]$lambda, output[[0]]$eps, output[[0]]$cluster))), nrow=num.iter/thin )
rep(0, num.iter/thin *length(c(entropy, output[[0]]$llk, output[[0]]$lambda, output[[0]]$eps, output[[0]]$cluster)))
final_table = matrix(rep(0, num.iter/thin *length(c(entropy, output[[1]]$llk, output[[1]]$lambda, output[[1]]$eps, output[[0]]$cluster))), nrow=num.iter/thin )
final_table = matrix(rep(0, num.iter/thin *length(c(entropy, output[[1]]$llk, output[[1]]$lambda, output[[1]]$eps, output[[1]]$cluster))), nrow=num.iter/thin )
dim(final_table)
print(file.name)
final_table = matrix(rep(0, num.iter/thin *length(c(entropy, output[[1]]$llk, output[[1]]$lambda, output[[1]]$eps, output[[1]]$cluster))), nrow=num.iter/thin )
for (i in 1:num.iter/thin){
final_table[i, ] = c(entropy, output[[i]]$llk, output[[i]]$lambda, output[[i]]$eps, output[[i]]$cluster)
}
write.table(final_table, file.name, append=F, quote=F, sep=",", row.names = F,col.names=F)
test = read.table(file.name, header=F, sep=',')
test
dim(test)
plot(1:length(llk), llk, 'l')
llk = unlist(lapply(output, function(x) x$llk))
plot(1:length(llk), llk, 'l')
table(cluster_trace[[100]], cluster, K)
table(cluster_trace[[100]], cluster)
plot(1:length(llk), llk, 'l', main = paste('Num chain', num.chain, 'Num ind', num.ind, 'Num states', num.states, 'Soft diff', soft.diff, sep = ', ',  'Trial number', trial.num))
graph_file_name = paste("output/graph/sim",num.chain,num.ind,num.states,soft.diff,trial.num,sep="_")
llk = unlist(lapply(output, function(x) x$llk))
pdf(paste(file.name, '.pdf'))
plot(1:length(llk), llk, 'l', main = paste('Num chain', num.chain, 'Num ind', num.ind, 'Num states', num.states, 'Soft diff', soft.diff, sep = ', ',  'Trial number', trial.num))
dev.off()
tets = matrix(c(1,1,1,0,1,1,0,0,1), nrow=3)
test
a = matrix(c(1,1,1,0,1,1,0,0,1), nrow=3)
a
a = matrix(c(1,1,1,0,1,1,0,0,1), ncol=3)
a
a = t(a)
a
a %*% a
a %*% a %*% a
a %*% a %*% a %*% a
a %*% a %*% a %*% a %*% a
a = matrix(c(1,0,5,1), nrow=2)
a
b = matrix(c(1, 0, 5, 1), nrow =2)
b_1 = matrix(c(0, 0, 0, 1), nrow=2)
b
b_1
a = matrix(c(1, 0, 1, 1), nrow=2)
d_1 = matrix(c(0,1,1,3), nrow=2)
a
b
b_1
d_1
a%*%b_1 + b %*% d_1
det(matrix(c(6, 7, 0, 0, 0, 1, 1, 1, 1), nrow=3))
det(matrix(c(3, -1, 3, -2, 1, 1, 1, 0, 0), nrow=3))
det(matrix(c(3,-1,3, -2,1,1,-2,1,-2), nrow=3))
det(matrix(c(3, -1, 3, -2, 1, 1, 0, 1, 0), nrow=3))
det(matrix(c(3, -1, 3, -2, 1, -1, 0, 1, 0), nrow=3))
top = det(matrix(c(3, -1, 3, -2, 1, -1, 0, 1, 0), nrow=3))
top
bottom = det(matrix(c(3, -1, 3, -2, 1, -1, -2, 1, -2), nrow=3))
bottom
top / bottom
source('~/PycharmProjects/hmm/R_code/run_cz_hmm_mle.R', echo=TRUE)
num_chain=1
source('~/PycharmProjects/hmm/R_code/run_cz_hmm_mle.R', echo=TRUE)
soft.diff = 0.5
source('~/PycharmProjects/hmm/R_code/run_cz_hmm_mle.R', echo=TRUE)
num.chain=1
source('~/PycharmProjects/hmm/R_code/run_cz_hmm_mle.R', echo=TRUE)
source('~/PycharmProjects/hmm/R_code/run_cz_hmm_mle.R', echo=TRUE)
num.chain=10
source('~/PycharmProjects/hmm/R_code/run_cz_hmm_mle.R', echo=TRUE)
source('~/PycharmProjects/hmm/R_code/run_cz_hmm_mle.R', echo=TRUE)
source('~/PycharmProjects/hmm/R_code/run_cz_hmm_mle.R', echo=TRUE)
source('~/PycharmProjects/hmm/R_code/run_cz_hmm_mle.R', echo=TRUE)
source('~/PycharmProjects/hmm/R_code/run_cz_hmm_mle.R', echo=TRUE)
table = read.table('data/clean.data.student', header=F, sep=',')
table = read.table('data/clean.data.students', header=F, sep=',')
head(table)
table = read.table('data/clean.data.students', header=F, sep='\t')
head(table)
table = read.table('data/clean.data.students', header=F, sep='\\')
head(table)
load('data/all_data_list.Rdata')
observ.str
student = read.csv('student.csv', header=T, sep=',')
student = read.csv('students.csv', header=T, sep=',')
student = read.csv('data/students.csv', header=T, sep=',')
head(student)
all_id = unique(student$Student)
all_dorms = unique(student$Fall_2011)
len(all_id)
length(all_id)
first_dorms = unique(student$Freshman)
all_dorms
first_dorms
union(all_dorms, first_dorms)
union(all_dorms, first_dorms) %in% first_dorms
intersect(all_dorms, first_dorms) %in% first_dorms
first_dorms %in% intersect(all_dorms, first_dorms)
source('~/PycharmProjects/hmm/R_code/data/data_cleaning.r', echo=TRUE)
warnings()
coded_fall_2011
all_id
all_dorms
fall_2011
fall_2011[1]
str(Fall_2011)
str(student$Fall_2011)
all_dorms = unique(as.characters(student$Fall_2011))
all_dorms = unique(as.character(student$Fall_2011))
all_dorms
all_id = unique(student$Student)
all_dorms = unique(as.character(student$Fall_2011))
first_dorms = unique(student$Freshman)
fall_2011 = as.character(student$Fall_2011)
coded_fall_2011 = fall_2011
for(i in 1:length(all_dorms)){
this_dorm = all_dorms[i]
this_dorm_index = which(all_dorms == this_dorm)
coded_fall_2011[fall_2011 == this_dorm] = this_dorm_index
}
coded_fall_2011
coded_fall_2011 = as.numeric(coded_fall_2011)
coded_fall_2011
first_dorms
first_dorms = unique(as.character(student$Freshman))
first_dorms
freshman = as.character(student$Freshman)
freshman[freshman == 'N/A'] = NULL
freshman[freshman == 'N/A'] = NA
coded_freshman = freshman
for (j in 1:length(first_dorms)){
this_dorm = first_dorms[j]
this_dorm_index = which(all_dorms == this_dorm)
coded_freshman[freshman == this_dorm] = this_dorm_index
}
this_dorm
first_dorms = first_dorms[-which(first_dorms == 'N/A')]
first_dorms
coded_freshman = freshman
for (j in 1:length(first_dorms)){
this_dorm = first_dorms[j]
this_dorm_index = which(all_dorms == this_dorm)
coded_freshman[freshman == this_dorm] = this_dorm_index
}
coded_freshman = as.numeric(coded_freshman)
coded_freshman
which(coded_freshman == NA)
which(first_dorms == NA)
which(freshman == 'N/A')
freshman = as.character(student$Freshman)
which(freshman == 'N/A')
coded_freshman[253]
coded_freshman[254]
coded_freshman[255]
all_id = unique(student$Student)
all_dorms = unique(as.character(student$Fall_2011))
first_dorms = unique(as.character(student$Freshman))
first_dorms = first_dorms[-which(first_dorms == 'N/A')]
# No point changing the id --> need to re-map later anyway
# Convert all dorms
fall_2011 = as.character(student$Fall_2011)
coded_fall_2011 = fall_2011
for(i in 1:length(all_dorms)){
this_dorm = all_dorms[i]
this_dorm_index = which(all_dorms == this_dorm)
coded_fall_2011[fall_2011 == this_dorm] = this_dorm_index
}
coded_fall_2011 = as.numeric(coded_fall_2011)
freshman = as.character(student$Freshman)
freshman[freshman == 'N/A'] = 0
coded_freshman = freshman
for (j in 1:length(first_dorms)){
this_dorm = first_dorms[j]
this_dorm_index = which(all_dorms == this_dorm)
coded_freshman[freshman == this_dorm] = this_dorm_index
}
coded_freshman = as.numeric(coded_freshman)
coded_freshman
which(coded_freshman == 0)
student$Student
clean_student_df = data.frame(id = student$Student, gender = student$GENDER_CD, class_year = student$CLASS_YR, fall_2011 = coded_fall_2011, fresh_dorm = coded_freshman)
clean_student_df
which(student$CLASS_YR == NA)
which(as.character(student$CLASS_YR) == 'NA;)
;
)
llll
:
;
}
;
clean_student_df = data.frame(id = student$Student, gender = student$GENDER_CD, class_year = student$CLASS_YR, fall_2011 = coded_fall_2011, fresh_dorm = coded_freshman)
)
student = read.csv('data/students.csv', header=T, sep=',')
swipes = read.csv('data/swipes.csv', header=T, sep=',')
unique(student$CLASS_YR)
unique(student$GENDER_CD)
source('~/PycharmProjects/hmm/R_code/data/data_cleaning.r', echo=TRUE)
clean_student_df
swipes$meal.plan
meal_plan = substring(as.character(swipes$meal.plan), 1, 2)
meal_plan
table(meal_plan)
meal_plan_clean = meal_plan
meal_plan_clean[meal_plan == '9M'] = 9
meal_plan_clean[meal_plan == 'AT'] = 0
meal_plan_clean[meal_plan == 'BT'] = 0
meal_plan_clean
table(meal_plan_clean)
meal_plan_clean = as.numeric(meal_plan_clean)
meal_plan_clean
len(meal_plan)
length(meal_plan_clean)
dim(swipes)
head(swipes)
meal_plan_df = data.frame(id = swipes$ID, meal_plan=meal_plan_clean)
student_clean = merge(clean_student_df, meal_plan_df, by='id', all.x=T)
studetn_clean
student_clean
dim(student)
set(student_clean$id)
unique(student_clean$id)
head(student_clean)
dim(student_clean)
student_clean = merge(clean_student_df, meal_plan_df, by='id', all.x=T, all.y=F)
dim(student_clean)
subset(meal_plan_df, !duplicated(meal_plan_df$id))
test = subset(meal_plan_df, !duplicated(meal_plan_df$id))
dim(test)
student_clean = merge(clean_student_df, meal_plan_df, by='id', all.x=T, all.y=F)
dim(student_clean)
meal_plan_df = subset(meal_plan_df, !duplicated(meal_plan_df$id))
student_clean = merge(clean_student_df, meal_plan_df, by='id', all.x=T, all.y=F)
dim(student_clean)
which(student_clean$meal_plan == NA)
which(student_clean$meal_plan == )
which(student_clean$meal_plan == 'NA')
which(student_clean$meal_plan == NULL)
student_clean$meal_plan
table(student_clean$meal_plan)
sum(table(student_clean$meal_plan))
length(student_clean$meal_plan)
student_clean = merge(clean_student_df, meal_plan_df, by='id')
dim(student_clean)
head(swipes)
meal_date = as.Date(swipes$date, "%m/%d/%Y")
meal_date
meal_date[1]
min_date = min(meal_date)
min_date
meal_day = meal_date - min_date
meal_day
as.POSIXlt(swipes$time)
meal_time = past(meal_date, swipes$time)
meal_time = paste(meal_date, swipes$time)
meal_time[1]
meal_time = as.POSIXlt.(paste(meal_date, swipes$time))
meal_time = as.POSIXlt(paste(meal_date, swipes$time))
meal_time[0]
meal_time[1]
meal_time[2]
meal_time[3]
meal_time[4]
meal_time[5]
strsplit(swipes$time, split=' ')
strsplit(swipes$time[1], split=' ')
test= swipes$time[1]
test
strsplit(as.character(swipes$time)[1], split=' ')
unlist(strsplit(as.character(swipes$time)[1], split=' '))
unlist(strsplit(as.character(swipes$time)[1], split=' '))[1]
unlist(strsplit(unlist(strsplit(as.character(swipes$time)[1], split=' '))[1], split = ':'))
this_time = as.character(swipes$time)[1]
first_split = unlist(strsplit(as.character(this_time), split=' '))
time_part = unlist(strsplit(first_split[1], split=':'))
hour = time_part[1]
min = time_part[2]
sec = time_part[3]
am_pm = first_split[2]
hour
min
hour = if (am_pm == 'PM') as.numeric(time_part[1]) + 12 else as.numeric(time_part[1])
hour
hour+min/60+sec/3600
min = as.numeric(time_part[2])
sec = as.numeric(time_part[3])
hour+min/60+sec/3600
hour*3600 + min*60 + sec
(hour+min/60+sec/3600)*3600
clean_time = apply(swipes$time, get_time_stamp_in_sec)
clean_time = apply(get_time_stamp_in_sec, swipes$time)
clean_time = apply(get_time_stamp_in_sec, 1, swipes$time)
clean_time = apply(swipes$time, 1, get_time_stamp_in_sec)
get_time_stamp_in_sec = function(this_time){
first_split = unlist(strsplit(as.character(this_time), split=' '))
time_part = unlist(strsplit(first_split[1], split=':'))
am_pm = first_split[2]
hour = if (am_pm == 'PM') as.numeric(time_part[1]) + 12 else as.numeric(time_part[1])
min = as.numeric(time_part[2])
sec = as.numeric(time_part[3])
return(hour+min/60+sec/3600)
}
clean_time = apply(swipes$time, 1, get_time_stamp_in_sec)
clean_time = apply(swipes$time, 0, get_time_stamp_in_sec)
clean_time = lapply(swipes$time, 1, get_time_stamp_in_sec)
clean_time = lapply(swipes$time, get_time_stamp_in_sec)
clean_time
clean_time = unlist(lapply(swipes$time, get_time_stamp_in_sec))
head(swipes)
clean_time[1]
new_swipe = cbind(swipes$ID, meal_day, clean_time, clean_hall)
clean_hall = hall
clean_hall[hall == 'MUAero01'] = 1
clean_hall[hall == 'MUAero1'] = 2
hall = as.character(swipes$hall)
clean_hall = hall
clean_hall[hall == 'MUAero01'] = 1
clean_hall[hall == 'MUAero1'] = 2
new_swipe = cbind(swipes$ID, meal_day, clean_time, clean_hall)
head(new_swipe)
id = swipes$ID
new_swipe = cbind(id, meal_day, clean_time, clean_hall)
id = swipes$ID
head(new_swipe)
hall = as.character(swipes$hall)
clean_hall = hall
clean_hall[hall == 'MUAero01'] = 1
clean_hall[hall == 'THAero1'] = 2
id = swipes$ID
new_swipe = cbind(id, meal_day, clean_time, clean_hall)
head(new_swipe)
m_th_swipe = new_swipe[new_swipe$clean_hall %in% c("1", "2")]
m_th_swipe = new_swipe[new_swipes$ID %in% c("1", "2")]
m_th_swipe = new_swipe[new_swipe$ID %in% c("1", "2")]
m_th_swipe = new_swipe[new_swipe$clean_hall %in% c("1", "2")]
new_swipe = cbind(id, meal_day, clean_time, clean_hall)
m_th_swipe = new_swipe[new_swipe$clean_hall %in% c("1", "2")]
new_swipe = data.frame(id = as.numeric(id), day = as.numeric(meal_day), time = as.numeric(clean_time), hall = clean_hall)
m_th_swipes = new_swipe[new_swipe$hall %in% c("1", "2")]
new_swipe$hall %in% c("1", "2")
m_th_swipes = new_swipe[which(new_swipe$hall %in% c("1", "2"))]
which(new_swipe$hall %in% c("1", "2"))
m_th_swipes = new_swipe[which(new_swipe$hall %in% c("1", "2"))]
m_th_swipes = new_swipe[which(new_swipe$hall %in% c("1", "2")), ]
dim(m_th_swipes)
sum(clean_hall $in$ c("1", "2"))
sum(clean_hall %in% c("1", "2"))
new_swipe = data.frame(id = as.numeric(id), day = as.numeric(meal_day), time = as.numeric(clean_time), hall = clean_hall, meal = swipes$meal)
m_th_swipes = new_swipe[which(new_swipe$hall %in% c("1", "2")), ]
dinner_m_th_swipes = m_th_swipes[which(m_th_swipes$meal == 'Dinner')]
dinner_m_th_swipes = m_th_swipes[which(m_th_swipes$meal == 'Dinner'), ]
dim(dinner_m_th_swipes)
head(dinner_m_th_swipes)
dinner_m_th_swipes = m_th_swipes[which(m_th_swipes$meal == 'Dinner'), 1:4]
dinner_m_th_swipes
head(dinner_m_th_swipes)
source('~/PycharmProjects/hmm/R_code/data/data_cleaning.r', echo=TRUE)
save(student_clean, 'data/clean_student.Rdata')
save(student_clean, 'data/clean_student.rda')
saveRDS(student_clean, 'data/clean_student.rda')
saveRDS(dinner_m_th_swipes, 'data/clean_dinner_swipes.rda')
load('data/clean_student.rda')
source('~/PycharmProjects/hmm/R_code/data/data_cleaning.r', echo=TRUE)
load('data/clean_student.rda')
saveRDS(clean_student_df, file = 'data/clean_student')
saveRDS(dinner_m_th_swipes, file = 'data/clean_dinner_swipe')
load('data/clean_student')
head(clean_student_df)
suorce('data/clean_student')
source('data/clean_student')
saveRDS(clean_student_df, file = 'data/clean_student.rds')
saveRDS(dinner_m_th_swipes, file = 'data/clean_dinner_swipe.rds')
load('data/clean_student.rds')
read.rds('data/clean_student.rds')
read.table('data/clean_student.rds')
saveRDS(clean_student_df, file = 'data/clean_student.rdata')
saveRDS(dinner_m_th_swipes, file = 'data/clean_dinner_swipe.rdata')
load('data/clean_student.rdata')
save.image('data/student_dinner_swipes.rdata')
load('data/student_dinner_swipes.rdata')
dinner_m_th_swipes
head(dinner_m_th_swipes)
source('~/PycharmProjects/hmm/R_code/data/data_cleaning.r', echo=TRUE)
load('data/student_dinner_swipes.rdata')
select_group = clean_student_df$class_year == 2015
orginal_id = clean_student_df$id[select_group]
original_id = clean_student_df$id[select_group]
original_id
all_swipe = dinner_swipes[dinner_swipes$id %in% original_id, ]
all_swipe
all_days = unique(all_swipe$day)
all_days
all_days = sort(unique(all_swipe$day))
all_days
rep(list(), 3)
test = list(list(), 3)
test
test = rep(list(), 3)
test
test = rep(list(1), 3)
tet
test
swipe_in_list = rep(list(1, 2), length(all_days))
swipe_in_list
all_swipe_M = all_swipe[all_swipe$hall=="1", ]
all_swipe_M
all_swipe_for_this_hall = all_swipe_M = all_swipe[all_swipe$hall=="1", ]
all(all_swipe_for_this_hall ==  all_swipe_M)
all_days = sort(unique(all_swipe_for_this_hall$day))
swipe_list = rep(list(1), length(all_days))
for (i in 1:length(all_days)){
swipe_for_this_day = all_swipe_for_this_hall[all_swipe_for_this_hall$day == all_days[i], ]
swipe_list[[i]] = swipe_for_this_day[order(swipe_for_this_day$time), 1]
}
swipe_list
all_swipe = dinner_swipes[dinner_swipes$id %in% original_id, ]
all_swipe$new_id = unlist(lapply(all_swipe$id, function(x)which(original_id == x)))
all_swipe$new_id
all_days = sort(unique(all_swipe$day))
all_swipe_M = all_swipe[all_swipe$hall=="1", ]
make_swipe_list = function(all_swipe_for_this_hall){
all_days = sort(unique(all_swipe_for_this_hall$day))
swipe_list = rep(list(1), length(all_days))
for (i in 1:length(all_days)){
swipe_for_this_day = all_swipe_for_this_hall[all_swipe_for_this_hall$day == all_days[i], ]
swipe_list[[i]] = swipe_for_this_day[order(swipe_for_this_day$time), ]$new_id
}
return(swipe_list)
}
swipe_in_list_M = make_swipe_list(all_swipe_M)
swipe_in_list_M
